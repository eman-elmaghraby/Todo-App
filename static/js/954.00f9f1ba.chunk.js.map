{"version":3,"file":"static/js/954.00f9f1ba.chunk.js","mappings":"4LASA,MAAMA,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CC,MAAOF,EAAAA,KAAaG,SAAS,yCAC7BC,YAAaJ,EAAAA,KAAaG,SAAS,+DAGtB,SAASE,IAEtB,MAAMC,GAAeC,EAAAA,EAAAA,YAAWC,EAAAA,IAC1BC,GAAWC,EAAAA,EAAAA,MAGjB,IAAKJ,EACH,MAAM,IAAIK,MAAM,gDAGlB,MAAM,QAAEC,GAAYN,EAGdO,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbb,MAAO,GACPE,YAAa,IAEfL,mBACAiB,SAAUA,CAACC,EAAMC,KAAqB,IAAnB,UAAEC,GAAWD,EAE9B,MAAME,EAAU,CACdC,GAAIC,KAAKC,MACTrB,MAAOe,EAAOf,MACdE,YAAaa,EAAOb,YACpBoB,WAAW,GAGbZ,EAAQQ,GAERD,IAEAV,EAAS,cAAc,IAI3B,OAEEgB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,2EAA0EC,UACvFC,EAAAA,EAAAA,MAAA,QAAMZ,SAAUH,EAAOgB,aAAcH,UAAU,yCAAwCC,SAAA,EAErFC,EAAAA,EAAAA,MAACE,EAAAA,EAAS,CAAAH,SAAA,EACRF,EAAAA,EAAAA,KAAA,SACEM,MAAOlB,EAAOI,OAAOf,MACrB8B,SAAUnB,EAAOoB,aACjBC,OAAQrB,EAAOsB,WACfC,YAAY,QACZV,UAAU,aACVW,KAAK,QACLC,KAAK,SAGNzB,EAAO0B,QAAQrC,OAASW,EAAO2B,OAAOtC,OACrCuB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,mBAAkBC,SAAEd,EAAO2B,OAAOtC,QAC/C,SAIN0B,EAAAA,EAAAA,MAACE,EAAAA,EAAS,CAAAH,SAAA,EACRF,EAAAA,EAAAA,KAAA,SACEM,MAAOlB,EAAOI,OAAOb,YACrB4B,SAAUnB,EAAOoB,aACjBC,OAAQrB,EAAOsB,WACfC,YAAY,cACZV,UAAU,aACVW,KAAK,cACLC,KAAK,SAGNzB,EAAO0B,QAAQnC,aAAeS,EAAO2B,OAAOpC,aAC3CqB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,mBAAkBC,SAAEd,EAAO2B,OAAOpC,cAC/C,SAINqB,EAAAA,EAAAA,KAAA,UAAQa,KAAK,SAASG,UAAW5B,EAAO6B,QAAShB,UAAU,MAAKC,SAAC,iBAMzE,C,8EC5Fe,SAASgB,IACtB,OACEf,EAAAA,EAAAA,MAAA,OAAKF,UAAU,2EAA0EC,SAAA,EACvFF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,OAAMC,SAAC,eACrBF,EAAAA,EAAAA,KAACpB,EAAAA,EAAQ,MAGf,C","sources":["components/TodoForm.tsx","pages/Home.tsx"],"sourcesContent":["import { useFormik } from 'formik';\r\nimport React, { useContext } from 'react';\r\nimport * as Yup from 'yup';\r\nimport './styles/TodoForm.css';\r\nimport { FormGroup } from 'react-bootstrap';\r\nimport { TodosContext } from '../context/TodoContext';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n// Define validation schema using Yup\r\nconst validationSchema = Yup.object().shape({\r\n  title: Yup.string().required('Please provide a title for your todo.'),\r\n  description: Yup.string().required('A description is required for the todo. Please enter one.'),\r\n});\r\n\r\nexport default function TodoForm() {\r\n  // Access TodosContext to get the addTodo function\r\n  const todosContext = useContext(TodosContext);\r\n  const navigate = useNavigate();\r\n\r\n  // Ensure the component is used within a TodosProvider\r\n  if (!todosContext) {\r\n    throw new Error('TodoForm must be used within a TodosProvider');\r\n  }\r\n\r\n  const { addTodo } = todosContext;\r\n\r\n  // Initialize Formik with initial values, validation schema, and submit handler\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      title: '',\r\n      description: '',\r\n    },\r\n    validationSchema,\r\n    onSubmit: (values, { resetForm }) => {\r\n      // Create a new todo item with current date as ID\r\n      const newTodo = {\r\n        id: Date.now(),\r\n        title: values.title,\r\n        description: values.description,\r\n        completed: false,\r\n      };\r\n      // Add the new todo to context\r\n      addTodo(newTodo);\r\n      // Reset the form fields\r\n      resetForm();\r\n      // Navigate to the todos list page\r\n      navigate('/todos-list'); \r\n    },\r\n  });\r\n\r\n  return (\r\n    // Container for the form with styling\r\n    <div className='d-flex text-white flex-column justify-content-between align-items-center'>\r\n      <form onSubmit={formik.handleSubmit} className='d-flex flex-column align-items-stretch'>\r\n        {/* Title input field */}\r\n        <FormGroup>\r\n          <input\r\n            value={formik.values.title}\r\n            onChange={formik.handleChange}\r\n            onBlur={formik.handleBlur}\r\n            placeholder=\"Title\"\r\n            className=\"input mb-3\"\r\n            name=\"title\"\r\n            type=\"text\"\r\n          />\r\n          {/* Display validation error for title */}\r\n          {formik.touched.title && formik.errors.title ? (\r\n            <div className=\"text-danger mb-3\">{formik.errors.title}</div>\r\n          ) : null}\r\n        </FormGroup>\r\n\r\n        {/* Description input field */}\r\n        <FormGroup>\r\n          <input\r\n            value={formik.values.description}\r\n            onChange={formik.handleChange}\r\n            onBlur={formik.handleBlur}\r\n            placeholder=\"Description\"\r\n            className=\"input mb-3\"\r\n            name=\"description\"\r\n            type=\"text\"\r\n          />\r\n          {/* Display validation error for description */}\r\n          {formik.touched.description && formik.errors.description ? (\r\n            <div className=\"text-danger mb-3\">{formik.errors.description}</div>\r\n          ) : null}\r\n        </FormGroup>\r\n\r\n        {/* Submit button */}\r\n        <button type=\"submit\" disabled={!formik.isValid} className=\"btn\">\r\n          Add Todo\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport TodoForm from '../components/TodoForm';\r\n\r\nexport default function Home() {\r\n  return (\r\n    <div className='d-flex text-white flex-column justify-content-between align-items-center'>\r\n      <h1 className='mb-5'>Home Page</h1>\r\n      <TodoForm/>\r\n    </div>\r\n  );\r\n}\r\n"],"names":["validationSchema","Yup","shape","title","required","description","TodoForm","todosContext","useContext","TodosContext","navigate","useNavigate","Error","addTodo","formik","useFormik","initialValues","onSubmit","values","_ref","resetForm","newTodo","id","Date","now","completed","_jsx","className","children","_jsxs","handleSubmit","FormGroup","value","onChange","handleChange","onBlur","handleBlur","placeholder","name","type","touched","errors","disabled","isValid","Home"],"sourceRoot":""}